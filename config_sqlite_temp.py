#!/usr/bin/env python3
"""
Configura√ß√£o tempor√°ria usando SQLite para desenvolvimento
Use este arquivo enquanto o PostgreSQL n√£o estiver acess√≠vel
"""
import os
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv('config/.env')

# Configura√ß√µes SQLite tempor√°rias
SQLITE_DB_PATH = "temp_analise_logs.db"
DATABASE_URL = f"sqlite:///{SQLITE_DB_PATH}"

# Outras configura√ß√µes (mant√©m as originais)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GRAYLOG_URL = os.getenv("GRAYLOG_URL")
GRAYLOG_USER = os.getenv("GRAYLOG_USER")
GRAYLOG_PASSWORD = os.getenv("GRAYLOG_PASSWORD")

# API Configuration
API_URL = "link da sua API"

# Logging Configuration
LOG_LEVEL = "INFO"
LOG_FILE = "logs/feedback_system.log"
ERROR_LOG_FILE = "logs/feedback_system_errors.log"

# Performance Configuration
CACHE_TTL = 300  # 5 minutes
CACHE_MAX_ENTRIES = 100

print("‚ö†Ô∏è USANDO CONFIGURA√á√ÉO TEMPOR√ÅRIA COM SQLITE")
print(f"üìÅ Banco SQLite: {SQLITE_DB_PATH}")
print(f"üîó DATABASE_URL: {DATABASE_URL}")
print()
print("Para voltar ao PostgreSQL:")
print("1. Resolva o problema do pg_hba.conf")
print("2. Use novamente config/settings.py")